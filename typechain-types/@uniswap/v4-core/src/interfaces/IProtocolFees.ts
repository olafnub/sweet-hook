/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export interface IProtocolFeesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectProtocolFees"
      | "protocolFeeController"
      | "protocolFeesAccrued"
      | "setProtocolFee"
      | "setProtocolFeeController"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProtocolFeeControllerUpdated"
      | "ProtocolFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesAccrued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PoolKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;
}

export namespace ProtocolFeeControllerUpdatedEvent {
  export type InputTuple = [protocolFeeController: AddressLike];
  export type OutputTuple = [protocolFeeController: string];
  export interface OutputObject {
    protocolFeeController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeUpdatedEvent {
  export type InputTuple = [id: BytesLike, protocolFee: BigNumberish];
  export type OutputTuple = [id: string, protocolFee: bigint];
  export interface OutputObject {
    id: string;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IProtocolFees extends BaseContract {
  connect(runner?: ContractRunner | null): IProtocolFees;
  waitForDeployment(): Promise<this>;

  interface: IProtocolFeesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectProtocolFees: TypedContractMethod<
    [recipient: AddressLike, currency: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  protocolFeeController: TypedContractMethod<[], [string], "view">;

  protocolFeesAccrued: TypedContractMethod<
    [currency: AddressLike],
    [bigint],
    "view"
  >;

  setProtocolFee: TypedContractMethod<
    [key: PoolKeyStruct, newProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeController: TypedContractMethod<
    [controller: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectProtocolFees"
  ): TypedContractMethod<
    [recipient: AddressLike, currency: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolFeeController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeesAccrued"
  ): TypedContractMethod<[currency: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProtocolFee"
  ): TypedContractMethod<
    [key: PoolKeyStruct, newProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFeeController"
  ): TypedContractMethod<[controller: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ProtocolFeeControllerUpdated"
  ): TypedContractEvent<
    ProtocolFeeControllerUpdatedEvent.InputTuple,
    ProtocolFeeControllerUpdatedEvent.OutputTuple,
    ProtocolFeeControllerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeUpdated"
  ): TypedContractEvent<
    ProtocolFeeUpdatedEvent.InputTuple,
    ProtocolFeeUpdatedEvent.OutputTuple,
    ProtocolFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "ProtocolFeeControllerUpdated(address)": TypedContractEvent<
      ProtocolFeeControllerUpdatedEvent.InputTuple,
      ProtocolFeeControllerUpdatedEvent.OutputTuple,
      ProtocolFeeControllerUpdatedEvent.OutputObject
    >;
    ProtocolFeeControllerUpdated: TypedContractEvent<
      ProtocolFeeControllerUpdatedEvent.InputTuple,
      ProtocolFeeControllerUpdatedEvent.OutputTuple,
      ProtocolFeeControllerUpdatedEvent.OutputObject
    >;

    "ProtocolFeeUpdated(bytes32,uint24)": TypedContractEvent<
      ProtocolFeeUpdatedEvent.InputTuple,
      ProtocolFeeUpdatedEvent.OutputTuple,
      ProtocolFeeUpdatedEvent.OutputObject
    >;
    ProtocolFeeUpdated: TypedContractEvent<
      ProtocolFeeUpdatedEvent.InputTuple,
      ProtocolFeeUpdatedEvent.OutputTuple,
      ProtocolFeeUpdatedEvent.OutputObject
    >;
  };
}
