/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IExtsload,
  IExtsloadInterface,
} from "../../../../../@uniswap/v4-core/src/interfaces/IExtsload";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "slot",
        type: "bytes32",
      },
    ],
    name: "extsload",
    outputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "startSlot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nSlots",
        type: "uint256",
      },
    ],
    name: "extsload",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "slots",
        type: "bytes32[]",
      },
    ],
    name: "extsload",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "values",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IExtsload__factory {
  static readonly abi = _abi;
  static createInterface(): IExtsloadInterface {
    return new Interface(_abi) as IExtsloadInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IExtsload {
    return new Contract(address, _abi, runner) as unknown as IExtsload;
  }
}
