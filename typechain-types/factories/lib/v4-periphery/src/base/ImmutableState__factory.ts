/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  ImmutableState,
  ImmutableStateInterface,
} from "../../../../../lib/v4-periphery/src/base/ImmutableState";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPoolManager",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotPoolManager",
    type: "error",
  },
  {
    inputs: [],
    name: "poolManager",
    outputs: [
      {
        internalType: "contract IPoolManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161012d38038061012d83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805160a561008860003960006031015260a56000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dc4c90d314602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f3fea26469706673582212206797b84f4d09f73a7f719e1d2c64fd7d8ef06fa74fcae90534325e56d38c5e3564736f6c63430008180033";

type ImmutableStateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableStateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableState__factory extends ContractFactory {
  constructor(...args: ImmutableStateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _poolManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_poolManager, overrides || {});
  }
  override deploy(
    _poolManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_poolManager, overrides || {}) as Promise<
      ImmutableState & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ImmutableState__factory {
    return super.connect(runner) as ImmutableState__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableStateInterface {
    return new Interface(_abi) as ImmutableStateInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ImmutableState {
    return new Contract(address, _abi, runner) as unknown as ImmutableState;
  }
}
