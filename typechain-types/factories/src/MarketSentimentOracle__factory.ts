/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MarketSentimentOracle,
  MarketSentimentOracleInterface,
} from "../../src/MarketSentimentOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OraclePaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OracleUnpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fearGreedIndex",
        type: "uint256",
      },
    ],
    name: "SentimentUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_FEAR_GREED_INDEX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UPDATE_INTERVAL",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMarketSentiment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "marketSentiment",
    outputs: [
      {
        internalType: "uint256",
        name: "fearGreedIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fearGreedIndex",
        type: "uint256",
      },
    ],
    name: "updateSentiment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610053565b506000805460ff60a01b191690556100a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105ad806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806389ac41471161007157806389ac4147146101005780638da5cb5b14610109578063b1def23514610124578063b8c69bca14610137578063f2fde38b1461013f578063f9f4ca761461015257600080fd5b80633f4ba83a146100ae5780635c975abb146100b85780636bf99cac146100da578063715018a6146100f05780638456cb59146100f8575b600080fd5b6100b6610175565b005b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6100e2606481565b6040519081526020016100d1565b6100b66101b2565b6100b66101c6565b6100e2610e1081565b6000546040516001600160a01b0390911681526020016100d1565b6100b6610132366004610507565b610203565b6100e26102ae565b6100b661014d366004610520565b61035f565b600154600254610160919082565b604080519283526020830191909152016100d1565b61017d61039d565b6101856103ca565b60405133907f1666a2b6e987738c51149080b5b03218ccfdf562333f397a4d9fb194127b054190600090a2565b6101ba61039d565b6101c4600061041f565b565b6101ce61039d565b6101d661046f565b60405133907f75525f8d3e404eeea8622551ed83cba3fb47d2c840039d189fe69bc44c28d99690600090a2565b61020b61039d565b6102136104b2565b606481111561025e5760405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b60448201526064015b60405180910390fd5b604080518082018252828152426020918201819052600184905560025590518281527f5bc38087dcbf636db421daa4e538e06e4a9f18e3dc5b6ed8d9b9b7d7484d1c97910160405180910390a150565b6002546000906103005760405162461bcd60e51b815260206004820152601b60248201527f4e6f2073656e74696d656e74206461746120617661696c61626c6500000000006044820152606401610255565b600254610e10906103119042610550565b11156103585760405162461bcd60e51b815260206004820152601660248201527514d95b9d1a5b595b9d0819185d18481d1bdbc81bdb1960521b6044820152606401610255565b5060015490565b61036761039d565b6001600160a01b03811661039157604051631e4fbdf760e01b815260006004820152602401610255565b61039a8161041f565b50565b6000546001600160a01b031633146101c45760405163118cdaa760e01b8152336004820152602401610255565b6103d26104dd565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104776104b2565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586104023390565b600054600160a01b900460ff16156101c45760405163d93c066560e01b815260040160405180910390fd5b600054600160a01b900460ff166101c457604051638dfc202b60e01b815260040160405180910390fd5b60006020828403121561051957600080fd5b5035919050565b60006020828403121561053257600080fd5b81356001600160a01b038116811461054957600080fd5b9392505050565b8181038181111561057157634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220c9503619b9f6d293479a860b311ef4410a7dfc95b9d3d917b98545fd6870b59964736f6c63430008180033";

type MarketSentimentOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketSentimentOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarketSentimentOracle__factory extends ContractFactory {
  constructor(...args: MarketSentimentOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MarketSentimentOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MarketSentimentOracle__factory {
    return super.connect(runner) as MarketSentimentOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketSentimentOracleInterface {
    return new Interface(_abi) as MarketSentimentOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MarketSentimentOracle {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MarketSentimentOracle;
  }
}
